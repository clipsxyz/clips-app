name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Quality Checks
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: newsfeed/package-lock.json

      - name: Install dependencies
        working-directory: ./newsfeed
        run: npm ci

      - name: Run linting
        working-directory: ./newsfeed
        run: npm run lint

      - name: Run type checking
        working-directory: ./newsfeed
        run: npx tsc --noEmit

      - name: Run tests
        working-directory: ./newsfeed
        run: npm run test:run

      - name: Check bundle size
        working-directory: ./newsfeed
        run: |
          npm run build
          npx size-limit

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        working-directory: ./newsfeed
        run: npm audit --audit-level moderate

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Build and Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: newsfeed/package-lock.json

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: ./newsfeed
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ./newsfeed
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        working-directory: ./newsfeed
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Update deployment status
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "üì± App URL: https://gossapp.vercel.app"

  # Performance Testing
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './newsfeed/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Notify Success
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, lighthouse]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "üéâ Gossapp deployed successfully!"
          echo "üåê Production URL: https://gossapp.vercel.app"
          echo "üìä Performance: Lighthouse audit completed"
          echo "üîí Security: All checks passed"

      - name: Deployment Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs for details"
